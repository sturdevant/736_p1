#include<stdio.h>
#include<time.h>
#include<sys/time.h>
#include<sys/resource.h>
#include<sys/types.h>
#include<unistd.h>
#include<pthread.h>
#include"timers.h"
#include"arrays.h"
#include"output.h"

#define RUN_COUNT 10
#define DELAY_COUNT 200000000


pthread_mutex_t lock1 = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t lock2 = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cv1 = PTHREAD_COND_INITIALIZER;
pthread_cond_t cv2 = PTHREAD_COND_INITIALIZER;

int child_ready;

void* waitandsignal() {
   //printf("In child\n");
   pthread_mutex_lock(&lock1);
   //printf("Child waiting\n");
   child_ready = 1;
   pthread_cond_wait(&cv1, &lock1);
   //printf("Locking to signal parent.\n");
   pthread_mutex_lock(&lock2);
   //printf("Signalling parent.\n");
   pthread_cond_signal(&cv2);
   pthread_mutex_unlock(&lock2);
   return NULL;
}

int main(int argc, char** argv) {
   double results[RUN_COUNT];
   int i;
   volatile int delay;

   pthread_t p;

   for (i = 0; i < RUN_COUNT; i++) {
      child_ready = 0;
      pthread_mutex_lock(&lock2); 
      pthread_create(&p, NULL, &waitandsignal, NULL);

      while (child_ready == 0);
      pthread_mutex_lock(&lock1);
      double start = TIMER_START;

      //pthread_mutex_unlock(&lock1);
      //printf("Signalling child\n");
      pthread_cond_signal(&cv1);
      pthread_mutex_unlock(&lock1);
      //printf("Waiting for child\n");
      pthread_cond_wait(&cv2, &lock2);
      double stop = TIMER_STOP;
      results[i] = stop - start;

      pthread_join(p, NULL);
      pthread_mutex_unlock(&lock1);
      pthread_mutex_unlock(&lock2);
   }

   array_to_csv(results, RUN_COUNT, "cvtest.csv");
   return(0);
}
